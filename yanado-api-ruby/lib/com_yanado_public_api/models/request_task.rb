=begin
#Yanado REST API

#REST API for Yanado

OpenAPI spec version: 1.0
Contact: prle@yanado.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module ComYanadoPublicApi

  class RequestTask
    # Assignee id
    attr_accessor :assignee_id

    # Description
    attr_accessor :description

    # Due date
    attr_accessor :due_date

    attr_accessor :form

    # List id
    attr_accessor :list_id

    # Name
    attr_accessor :name

    # Status Id
    attr_accessor :status_id

    # Participant email
    attr_accessor :thread_email

    # Thread id
    attr_accessor :thread_id

    # Subject
    attr_accessor :thread_name

    # Subject
    attr_accessor :thread_subject


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'assignee_id' => :'assigneeId',
        :'description' => :'description',
        :'due_date' => :'dueDate',
        :'form' => :'form',
        :'list_id' => :'listId',
        :'name' => :'name',
        :'status_id' => :'statusId',
        :'thread_email' => :'threadEmail',
        :'thread_id' => :'threadId',
        :'thread_name' => :'threadName',
        :'thread_subject' => :'threadSubject'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'assignee_id' => :'String',
        :'description' => :'String',
        :'due_date' => :'DateTime',
        :'form' => :'Hash<String, String>',
        :'list_id' => :'String',
        :'name' => :'String',
        :'status_id' => :'String',
        :'thread_email' => :'String',
        :'thread_id' => :'String',
        :'thread_name' => :'String',
        :'thread_subject' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'assigneeId')
        self.assignee_id = attributes[:'assigneeId']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'dueDate')
        self.due_date = attributes[:'dueDate']
      end

      if attributes.has_key?(:'form')
        if (value = attributes[:'form']).is_a?(Array)
          self.form = value
        end
      end

      if attributes.has_key?(:'listId')
        self.list_id = attributes[:'listId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'statusId')
        self.status_id = attributes[:'statusId']
      end

      if attributes.has_key?(:'threadEmail')
        self.thread_email = attributes[:'threadEmail']
      end

      if attributes.has_key?(:'threadId')
        self.thread_id = attributes[:'threadId']
      end

      if attributes.has_key?(:'threadName')
        self.thread_name = attributes[:'threadName']
      end

      if attributes.has_key?(:'threadSubject')
        self.thread_subject = attributes[:'threadSubject']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @list_id.nil?
        invalid_properties.push("invalid value for 'list_id', list_id cannot be nil.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @status_id.nil?
        invalid_properties.push("invalid value for 'status_id', status_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @list_id.nil?
      return false if @name.nil?
      return false if @status_id.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          assignee_id == o.assignee_id &&
          description == o.description &&
          due_date == o.due_date &&
          form == o.form &&
          list_id == o.list_id &&
          name == o.name &&
          status_id == o.status_id &&
          thread_email == o.thread_email &&
          thread_id == o.thread_id &&
          thread_name == o.thread_name &&
          thread_subject == o.thread_subject
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [assignee_id, description, due_date, form, list_id, name, status_id, thread_email, thread_id, thread_name, thread_subject].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ComYanadoPublicApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
