=begin
#Yanado REST API

#REST API for Yanado

OpenAPI spec version: 1.0
Contact: prle@yanado.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module ComYanadoPublicApi
  class TasksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create task
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [RequestTask] :task_request Body
    # @return [Task]
    def create_task(opts = {})
      data, _status_code, _headers = create_task_with_http_info(opts)
      return data
    end

    # Create task
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [RequestTask] :task_request Body
    # @return [Array<(Task, Fixnum, Hash)>] Task data, response status code and response headers
    def create_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.create_task ..."
      end
      # resource path
      local_var_path = "/public-api/tasks"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'task_request'])
      auth_names = ['X-API-Key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Task')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#create_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get task
    # 
    # @param task_id Task id
    # @param [Hash] opts the optional parameters
    # @return [Task]
    def get_task(task_id, opts = {})
      data, _status_code, _headers = get_task_with_http_info(task_id, opts)
      return data
    end

    # Get task
    # 
    # @param task_id Task id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Task, Fixnum, Hash)>] Task data, response status code and response headers
    def get_task_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.get_task ..."
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.get_task"
      end
      # resource path
      local_var_path = "/public-api/tasks/{taskId}".sub('{' + 'taskId' + '}', task_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['X-API-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Task')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#get_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get tasks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_id List id
    # @option opts [String] :assignee Assignee
    # @option opts [String] :status_id Status Id
    # @option opts [String] :query Query
    # @return [Array<Task>]
    def get_tasks(opts = {})
      data, _status_code, _headers = get_tasks_with_http_info(opts)
      return data
    end

    # Get tasks
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_id List id
    # @option opts [String] :assignee Assignee
    # @option opts [String] :status_id Status Id
    # @option opts [String] :query Query
    # @return [Array<(Array<Task>, Fixnum, Hash)>] Array<Task> data, response status code and response headers
    def get_tasks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.get_tasks ..."
      end
      # resource path
      local_var_path = "/public-api/tasks"

      # query parameters
      query_params = {}
      query_params[:'listId'] = opts[:'list_id'] if !opts[:'list_id'].nil?
      query_params[:'assignee'] = opts[:'assignee'] if !opts[:'assignee'].nil?
      query_params[:'statusId'] = opts[:'status_id'] if !opts[:'status_id'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['X-API-Key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Task>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#get_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update task
    # 
    # @param task_id Task id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateRequestTask] :task_request Body
    # @return [Task]
    def update_task(task_id, opts = {})
      data, _status_code, _headers = update_task_with_http_info(task_id, opts)
      return data
    end

    # Update task
    # 
    # @param task_id Task id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateRequestTask] :task_request Body
    # @return [Array<(Task, Fixnum, Hash)>] Task data, response status code and response headers
    def update_task_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TasksApi.update_task ..."
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TasksApi.update_task"
      end
      # resource path
      local_var_path = "/public-api/tasks/{taskId}".sub('{' + 'taskId' + '}', task_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'task_request'])
      auth_names = ['X-API-Key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Task')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TasksApi#update_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
