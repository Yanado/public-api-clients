# coding: utf-8

"""
    Yanado REST API

    REST API for Yanado

    OpenAPI spec version: 1.0
    Contact: prle@yanado.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Task(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignee_id': 'str',
        'assignee_name': 'str',
        'create_time': 'datetime',
        'description': 'str',
        'due_date': 'datetime',
        'high_priority': 'bool',
        'list_id': 'str',
        'list_name': 'str',
        'name': 'str',
        'status_id': 'str',
        'status_name': 'str',
        'task_id': 'str'
    }

    attribute_map = {
        'assignee_id': 'assigneeId',
        'assignee_name': 'assigneeName',
        'create_time': 'createTime',
        'description': 'description',
        'due_date': 'dueDate',
        'high_priority': 'highPriority',
        'list_id': 'listId',
        'list_name': 'listName',
        'name': 'name',
        'status_id': 'statusId',
        'status_name': 'statusName',
        'task_id': 'taskId'
    }

    def __init__(self, assignee_id=None, assignee_name=None, create_time=None, description=None, due_date=None, high_priority=None, list_id=None, list_name=None, name=None, status_id=None, status_name=None, task_id=None):
        """
        Task - a model defined in Swagger
        """

        self._assignee_id = None
        self._assignee_name = None
        self._create_time = None
        self._description = None
        self._due_date = None
        self._high_priority = None
        self._list_id = None
        self._list_name = None
        self._name = None
        self._status_id = None
        self._status_name = None
        self._task_id = None

        if assignee_id is not None:
          self.assignee_id = assignee_id
        if assignee_name is not None:
          self.assignee_name = assignee_name
        if create_time is not None:
          self.create_time = create_time
        if description is not None:
          self.description = description
        if due_date is not None:
          self.due_date = due_date
        if high_priority is not None:
          self.high_priority = high_priority
        if list_id is not None:
          self.list_id = list_id
        if list_name is not None:
          self.list_name = list_name
        if name is not None:
          self.name = name
        if status_id is not None:
          self.status_id = status_id
        if status_name is not None:
          self.status_name = status_name
        if task_id is not None:
          self.task_id = task_id

    @property
    def assignee_id(self):
        """
        Gets the assignee_id of this Task.
        Assignee id

        :return: The assignee_id of this Task.
        :rtype: str
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """
        Sets the assignee_id of this Task.
        Assignee id

        :param assignee_id: The assignee_id of this Task.
        :type: str
        """

        self._assignee_id = assignee_id

    @property
    def assignee_name(self):
        """
        Gets the assignee_name of this Task.
        Assignee name

        :return: The assignee_name of this Task.
        :rtype: str
        """
        return self._assignee_name

    @assignee_name.setter
    def assignee_name(self, assignee_name):
        """
        Sets the assignee_name of this Task.
        Assignee name

        :param assignee_name: The assignee_name of this Task.
        :type: str
        """

        self._assignee_name = assignee_name

    @property
    def create_time(self):
        """
        Gets the create_time of this Task.
        Created

        :return: The create_time of this Task.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """
        Sets the create_time of this Task.
        Created

        :param create_time: The create_time of this Task.
        :type: datetime
        """

        self._create_time = create_time

    @property
    def description(self):
        """
        Gets the description of this Task.
        Description

        :return: The description of this Task.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Task.
        Description

        :param description: The description of this Task.
        :type: str
        """

        self._description = description

    @property
    def due_date(self):
        """
        Gets the due_date of this Task.
        Due date

        :return: The due_date of this Task.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """
        Sets the due_date of this Task.
        Due date

        :param due_date: The due_date of this Task.
        :type: datetime
        """

        self._due_date = due_date

    @property
    def high_priority(self):
        """
        Gets the high_priority of this Task.
        Hight priority

        :return: The high_priority of this Task.
        :rtype: bool
        """
        return self._high_priority

    @high_priority.setter
    def high_priority(self, high_priority):
        """
        Sets the high_priority of this Task.
        Hight priority

        :param high_priority: The high_priority of this Task.
        :type: bool
        """

        self._high_priority = high_priority

    @property
    def list_id(self):
        """
        Gets the list_id of this Task.
        List id

        :return: The list_id of this Task.
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """
        Sets the list_id of this Task.
        List id

        :param list_id: The list_id of this Task.
        :type: str
        """

        self._list_id = list_id

    @property
    def list_name(self):
        """
        Gets the list_name of this Task.
        List name

        :return: The list_name of this Task.
        :rtype: str
        """
        return self._list_name

    @list_name.setter
    def list_name(self, list_name):
        """
        Sets the list_name of this Task.
        List name

        :param list_name: The list_name of this Task.
        :type: str
        """

        self._list_name = list_name

    @property
    def name(self):
        """
        Gets the name of this Task.
        Name

        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Task.
        Name

        :param name: The name of this Task.
        :type: str
        """

        self._name = name

    @property
    def status_id(self):
        """
        Gets the status_id of this Task.
        Status Id

        :return: The status_id of this Task.
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """
        Sets the status_id of this Task.
        Status Id

        :param status_id: The status_id of this Task.
        :type: str
        """

        self._status_id = status_id

    @property
    def status_name(self):
        """
        Gets the status_name of this Task.
        Status name

        :return: The status_name of this Task.
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """
        Sets the status_name of this Task.
        Status name

        :param status_name: The status_name of this Task.
        :type: str
        """

        self._status_name = status_name

    @property
    def task_id(self):
        """
        Gets the task_id of this Task.
        Id

        :return: The task_id of this Task.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """
        Sets the task_id of this Task.
        Id

        :param task_id: The task_id of this Task.
        :type: str
        """

        self._task_id = task_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
