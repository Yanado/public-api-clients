<?php
/**
 * NotificationsApi
 * PHP version 5
 *
 * @category Class
 * @package  com.yanado.invoker
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yanado REST API
 *
 * REST API for Yanado
 *
 * OpenAPI spec version: 1.0
 * Contact: prle@yanado.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.yanado.invoker\com.yanado.api;

use \com.yanado.invoker\ApiClient;
use \com.yanado.invoker\ApiException;
use \com.yanado.invoker\Configuration;
use \com.yanado.invoker\ObjectSerializer;

/**
 * NotificationsApi Class Doc Comment
 *
 * @category Class
 * @package  com.yanado.invoker
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationsApi
{
    /**
     * API Client
     *
     * @var \com.yanado.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \com.yanado.invoker\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\com.yanado.invoker\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \com.yanado.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \com.yanado.invoker\ApiClient $apiClient set the API client
     *
     * @return NotificationsApi
     */
    public function setApiClient(\com.yanado.invoker\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getNotifications
     *
     * Get notifications
     *
     * @param string $type Notification type (required)
     * @param bool $any_user Any user (optional, default to false)
     * @param string $list_id List id (optional)
     * @throws \com.yanado.invoker\ApiException on non-2xx response
     * @return \com.yanado.invoker\com.yanado.model\Notification[]
     */
    public function getNotifications($type, $any_user = 'false', $list_id = null)
    {
        list($response) = $this->getNotificationsWithHttpInfo($type, $any_user, $list_id);
        return $response;
    }

    /**
     * Operation getNotificationsWithHttpInfo
     *
     * Get notifications
     *
     * @param string $type Notification type (required)
     * @param bool $any_user Any user (optional, default to false)
     * @param string $list_id List id (optional)
     * @throws \com.yanado.invoker\ApiException on non-2xx response
     * @return array of \com.yanado.invoker\com.yanado.model\Notification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getNotificationsWithHttpInfo($type, $any_user = 'false', $list_id = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling getNotifications');
        }
        // parse inputs
        $resourcePath = "/public-api/notifications/{type}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($any_user !== null) {
            $queryParams['anyUser'] = $this->apiClient->getSerializer()->toQueryValue($any_user);
        }
        // query params
        if ($list_id !== null) {
            $queryParams['listId'] = $this->apiClient->getSerializer()->toQueryValue($list_id);
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\com.yanado.invoker\com.yanado.model\Notification[]',
                '/public-api/notifications/{type}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\com.yanado.invoker\com.yanado.model\Notification[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.yanado.invoker\com.yanado.model\Notification[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
