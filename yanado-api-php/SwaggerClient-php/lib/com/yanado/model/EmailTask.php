<?php
/**
 * EmailTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.yanado.invoker
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yanado REST API
 *
 * REST API for Yanado
 *
 * OpenAPI spec version: 1.0
 * Contact: prle@yanado.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.yanado.invoker\com.yanado.model;

use \ArrayAccess;

/**
 * EmailTask Class Doc Comment
 *
 * @category    Class
 * @package     com.yanado.invoker
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class EmailTask implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Email Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'assignee_id' => 'string',
        'assignee_name' => 'string',
        'id' => 'int',
        'list_id' => 'string',
        'list_name' => 'string',
        'participant_email' => 'string',
        'participant_name' => 'string',
        'status_id' => 'string',
        'status_name' => 'string',
        'subject' => 'string',
        'task_created' => '\DateTime',
        'task_description' => 'string',
        'task_due_date' => '\DateTime',
        'task_high_priority' => 'bool',
        'task_id' => 'string',
        'task_name' => 'string',
        'thread_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'assignee_id' => null,
        'assignee_name' => null,
        'id' => 'int32',
        'list_id' => null,
        'list_name' => null,
        'participant_email' => null,
        'participant_name' => null,
        'status_id' => null,
        'status_name' => null,
        'subject' => null,
        'task_created' => 'date-time',
        'task_description' => null,
        'task_due_date' => 'date-time',
        'task_high_priority' => null,
        'task_id' => null,
        'task_name' => null,
        'thread_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'assignee_id' => 'assigneeId',
        'assignee_name' => 'assigneeName',
        'id' => 'id',
        'list_id' => 'listId',
        'list_name' => 'listName',
        'participant_email' => 'participantEmail',
        'participant_name' => 'participantName',
        'status_id' => 'statusId',
        'status_name' => 'statusName',
        'subject' => 'subject',
        'task_created' => 'taskCreated',
        'task_description' => 'taskDescription',
        'task_due_date' => 'taskDueDate',
        'task_high_priority' => 'taskHighPriority',
        'task_id' => 'taskId',
        'task_name' => 'taskName',
        'thread_id' => 'threadId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'assignee_id' => 'setAssigneeId',
        'assignee_name' => 'setAssigneeName',
        'id' => 'setId',
        'list_id' => 'setListId',
        'list_name' => 'setListName',
        'participant_email' => 'setParticipantEmail',
        'participant_name' => 'setParticipantName',
        'status_id' => 'setStatusId',
        'status_name' => 'setStatusName',
        'subject' => 'setSubject',
        'task_created' => 'setTaskCreated',
        'task_description' => 'setTaskDescription',
        'task_due_date' => 'setTaskDueDate',
        'task_high_priority' => 'setTaskHighPriority',
        'task_id' => 'setTaskId',
        'task_name' => 'setTaskName',
        'thread_id' => 'setThreadId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'assignee_id' => 'getAssigneeId',
        'assignee_name' => 'getAssigneeName',
        'id' => 'getId',
        'list_id' => 'getListId',
        'list_name' => 'getListName',
        'participant_email' => 'getParticipantEmail',
        'participant_name' => 'getParticipantName',
        'status_id' => 'getStatusId',
        'status_name' => 'getStatusName',
        'subject' => 'getSubject',
        'task_created' => 'getTaskCreated',
        'task_description' => 'getTaskDescription',
        'task_due_date' => 'getTaskDueDate',
        'task_high_priority' => 'getTaskHighPriority',
        'task_id' => 'getTaskId',
        'task_name' => 'getTaskName',
        'thread_id' => 'getThreadId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['assignee_id'] = isset($data['assignee_id']) ? $data['assignee_id'] : null;
        $this->container['assignee_name'] = isset($data['assignee_name']) ? $data['assignee_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['list_id'] = isset($data['list_id']) ? $data['list_id'] : null;
        $this->container['list_name'] = isset($data['list_name']) ? $data['list_name'] : null;
        $this->container['participant_email'] = isset($data['participant_email']) ? $data['participant_email'] : null;
        $this->container['participant_name'] = isset($data['participant_name']) ? $data['participant_name'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['status_name'] = isset($data['status_name']) ? $data['status_name'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['task_created'] = isset($data['task_created']) ? $data['task_created'] : null;
        $this->container['task_description'] = isset($data['task_description']) ? $data['task_description'] : null;
        $this->container['task_due_date'] = isset($data['task_due_date']) ? $data['task_due_date'] : null;
        $this->container['task_high_priority'] = isset($data['task_high_priority']) ? $data['task_high_priority'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['task_name'] = isset($data['task_name']) ? $data['task_name'] : null;
        $this->container['thread_id'] = isset($data['thread_id']) ? $data['thread_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets assignee_id
     * @return string
     */
    public function getAssigneeId()
    {
        return $this->container['assignee_id'];
    }

    /**
     * Sets assignee_id
     * @param string $assignee_id Task assignee id
     * @return $this
     */
    public function setAssigneeId($assignee_id)
    {
        $this->container['assignee_id'] = $assignee_id;

        return $this;
    }

    /**
     * Gets assignee_name
     * @return string
     */
    public function getAssigneeName()
    {
        return $this->container['assignee_name'];
    }

    /**
     * Sets assignee_name
     * @param string $assignee_name Task assignee name
     * @return $this
     */
    public function setAssigneeName($assignee_name)
    {
        $this->container['assignee_name'] = $assignee_name;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets list_id
     * @return string
     */
    public function getListId()
    {
        return $this->container['list_id'];
    }

    /**
     * Sets list_id
     * @param string $list_id Task list id
     * @return $this
     */
    public function setListId($list_id)
    {
        $this->container['list_id'] = $list_id;

        return $this;
    }

    /**
     * Gets list_name
     * @return string
     */
    public function getListName()
    {
        return $this->container['list_name'];
    }

    /**
     * Sets list_name
     * @param string $list_name Task list name
     * @return $this
     */
    public function setListName($list_name)
    {
        $this->container['list_name'] = $list_name;

        return $this;
    }

    /**
     * Gets participant_email
     * @return string
     */
    public function getParticipantEmail()
    {
        return $this->container['participant_email'];
    }

    /**
     * Sets participant_email
     * @param string $participant_email Participant email
     * @return $this
     */
    public function setParticipantEmail($participant_email)
    {
        $this->container['participant_email'] = $participant_email;

        return $this;
    }

    /**
     * Gets participant_name
     * @return string
     */
    public function getParticipantName()
    {
        return $this->container['participant_name'];
    }

    /**
     * Sets participant_name
     * @param string $participant_name Participant name
     * @return $this
     */
    public function setParticipantName($participant_name)
    {
        $this->container['participant_name'] = $participant_name;

        return $this;
    }

    /**
     * Gets status_id
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     * @param string $status_id Task status id
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets status_name
     * @return string
     */
    public function getStatusName()
    {
        return $this->container['status_name'];
    }

    /**
     * Sets status_name
     * @param string $status_name Task status name
     * @return $this
     */
    public function setStatusName($status_name)
    {
        $this->container['status_name'] = $status_name;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject Subject
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets task_created
     * @return \DateTime
     */
    public function getTaskCreated()
    {
        return $this->container['task_created'];
    }

    /**
     * Sets task_created
     * @param \DateTime $task_created Task created
     * @return $this
     */
    public function setTaskCreated($task_created)
    {
        $this->container['task_created'] = $task_created;

        return $this;
    }

    /**
     * Gets task_description
     * @return string
     */
    public function getTaskDescription()
    {
        return $this->container['task_description'];
    }

    /**
     * Sets task_description
     * @param string $task_description Task description
     * @return $this
     */
    public function setTaskDescription($task_description)
    {
        $this->container['task_description'] = $task_description;

        return $this;
    }

    /**
     * Gets task_due_date
     * @return \DateTime
     */
    public function getTaskDueDate()
    {
        return $this->container['task_due_date'];
    }

    /**
     * Sets task_due_date
     * @param \DateTime $task_due_date Task due date
     * @return $this
     */
    public function setTaskDueDate($task_due_date)
    {
        $this->container['task_due_date'] = $task_due_date;

        return $this;
    }

    /**
     * Gets task_high_priority
     * @return bool
     */
    public function getTaskHighPriority()
    {
        return $this->container['task_high_priority'];
    }

    /**
     * Sets task_high_priority
     * @param bool $task_high_priority Task high priority
     * @return $this
     */
    public function setTaskHighPriority($task_high_priority)
    {
        $this->container['task_high_priority'] = $task_high_priority;

        return $this;
    }

    /**
     * Gets task_id
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     * @param string $task_id Task id
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_name
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     * @param string $task_name Task Name
     * @return $this
     */
    public function setTaskName($task_name)
    {
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets thread_id
     * @return string
     */
    public function getThreadId()
    {
        return $this->container['thread_id'];
    }

    /**
     * Sets thread_id
     * @param string $thread_id Thread id
     * @return $this
     */
    public function setThreadId($thread_id)
    {
        $this->container['thread_id'] = $thread_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\com.yanado.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\com.yanado.invoker\ObjectSerializer::sanitizeForSerialization($this));
    }
}


